#!/usr/bin/env node

/**
 * üîß FIX CONTEXT FUNCTION
 * Kh·∫Øc ph·ª•c function get_current_user_id_from_context v√† t·∫°o test data
 */

const { createClient } = require('@supabase/supabase-js');

// Supabase configuration
const SUPABASE_URL = 'https://fnakxavwxubnbucfoujd.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZuYWt4YXZ3eHVibmJ1Y2ZvdWpkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA1ODY2NjEsImV4cCI6MjA2NjE2MjY2MX0.Gj4RYtx-fnTHHoLe71mGvhVze5NgWy25PME4OVle22M';

async function fixContextFunction() {
  console.log('üîß Kh·∫Øc ph·ª•c function context v√† t·∫°o test data...\n');

  try {
    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    console.log('üìù SQL c·∫ßn ch·∫°y trong Supabase SQL Editor:\n');
    console.log('='.repeat(80));
    
    // 1. Fix function get_current_user_id_from_context
    console.log('-- 1. FIX FUNCTION get_current_user_id_from_context');
    console.log(`
CREATE OR REPLACE FUNCTION get_current_user_id_from_context()
RETURNS UUID AS $$
DECLARE
  user_id_text TEXT;
  user_id UUID;
BEGIN
  -- L·∫•y user ID t·ª´ custom setting
  BEGIN
    user_id_text := current_setting('app.current_user_id', false);
  EXCEPTION WHEN OTHERS THEN
    user_id_text := NULL;
  END;
  
  -- Debug log
  RAISE NOTICE 'get_current_user_id_from_context: user_id_text = %', user_id_text;
  
  -- N·∫øu kh√¥ng c√≥ ho·∫∑c r·ªóng, tr·∫£ v·ªÅ NULL
  IF user_id_text IS NULL OR user_id_text = '' OR user_id_text = 'null' THEN
    RETURN NULL;
  END IF;
  
  -- Convert text to UUID
  BEGIN
    user_id := user_id_text::UUID;
    RAISE NOTICE 'get_current_user_id_from_context: converted UUID = %', user_id;
    RETURN user_id;
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'get_current_user_id_from_context: conversion failed for %', user_id_text;
    RETURN NULL;
  END;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant permissions
GRANT EXECUTE ON FUNCTION get_current_user_id_from_context() TO authenticated, anon;
`);

    console.log('\n-- 2. FIX FUNCTION set_user_context');
    console.log(`
CREATE OR REPLACE FUNCTION set_user_context(user_uuid UUID)
RETURNS void AS $$
BEGIN
  -- Set a custom setting that can be used in RLS policies
  PERFORM set_config('app.current_user_id', user_uuid::text, false);
  
  -- Debug log
  RAISE NOTICE 'set_user_context: set user_id = %', user_uuid;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant permissions
GRANT EXECUTE ON FUNCTION set_user_context(UUID) TO authenticated, anon;
`);

    console.log('\n-- 3. T·∫†O TEST TASKS CHO NGUY·ªÑN M·∫†NH LINH');
    console.log(`
-- T·∫°o test tasks cho Nguy·ªÖn M·∫°nh Linh
INSERT INTO tasks (
  name, 
  description, 
  created_by_id, 
  assigned_to_id, 
  status, 
  priority,
  work_type,
  department,
  team_id
) VALUES 
(
  'Task Test 1 - Nguy·ªÖn M·∫°nh Linh', 
  'Task test ƒë·ªÉ ki·ªÉm tra RLS - t·ª± t·∫°o v√† t·ª± l√†m', 
  '3e1aa0d1-d98a-4eb5-b8ff-5e8956757535', 
  '3e1aa0d1-d98a-4eb5-b8ff-5e8956757535', 
  'pending', 
  'medium',
  'other',
  'HN',
  NULL
),
(
  'Task Test 2 - Nguy·ªÖn M·∫°nh Linh', 
  'Task test kh√°c ƒë·ªÉ ki·ªÉm tra RLS', 
  '3e1aa0d1-d98a-4eb5-b8ff-5e8956757535', 
  '3e1aa0d1-d98a-4eb5-b8ff-5e8956757535', 
  'in_progress', 
  'high',
  'meeting',
  'HN',
  NULL
);
`);

    console.log('\n-- 4. T·∫†O TASKS CHO C√ÅC USER KH√ÅC (ƒë·ªÉ test ph√¢n quy·ªÅn)');
    console.log(`
-- T·∫°o tasks cho user kh√°c ƒë·ªÉ test ph√¢n quy·ªÅn
INSERT INTO tasks (
  name, 
  description, 
  created_by_id, 
  assigned_to_id, 
  status, 
  priority,
  work_type,
  department
) VALUES 
(
  'Task c·ªßa Nguy·ªÖn Th·ªã Nga', 
  'Task n√†y ch·ªâ Nga m·ªõi th·∫•y ƒë∆∞·ª£c', 
  (SELECT id FROM users WHERE name = 'Nguy·ªÖn Th·ªã Nga' LIMIT 1), 
  (SELECT id FROM users WHERE name = 'Nguy·ªÖn Th·ªã Nga' LIMIT 1), 
  'pending', 
  'medium',
  'other',
  'HN'
),
(
  'Task c·ªßa H√† Nguy·ªÖn Thanh Tuy·ªÅn', 
  'Task n√†y ch·ªâ Tuy·ªÅn m·ªõi th·∫•y ƒë∆∞·ª£c', 
  (SELECT id FROM users WHERE name = 'H√† Nguy·ªÖn Thanh Tuy·ªÅn' LIMIT 1), 
  (SELECT id FROM users WHERE name = 'H√† Nguy·ªÖn Thanh Tuy·ªÅn' LIMIT 1), 
  'pending', 
  'low',
  'other',
  'HN'
);
`);

    console.log('\n-- 5. T·∫†O TEMPORARY POLICY ƒê·ªÇ TEST');
    console.log(`
-- T·∫°m th·ªùi t·∫°o policy ƒë∆°n gi·∫£n ƒë·ªÉ test
DROP POLICY IF EXISTS "temp_test_policy" ON tasks;

CREATE POLICY "temp_test_policy" ON tasks
  FOR SELECT USING (
    -- Allow if user context matches created_by_id OR assigned_to_id
    created_by_id::text = current_setting('app.current_user_id', true)
    OR assigned_to_id::text = current_setting('app.current_user_id', true)
    -- OR allow all for debugging (remove this line after testing)
    OR current_setting('app.current_user_id', true) IS NOT NULL
  );
`);

    console.log('\n='.repeat(80));
    console.log('\nüîß H∆Ø·ªöNG D·∫™N TH·ª∞C HI·ªÜN:');
    console.log('1. Copy to√†n b·ªô SQL ·ªü tr√™n');
    console.log('2. Paste v√†o Supabase SQL Editor');
    console.log('3. Click "Run"');
    console.log('4. Refresh trang web app');
    console.log('5. ƒêƒÉng nh·∫≠p l·∫°i v·ªõi Nguy·ªÖn M·∫°nh Linh');
    console.log('6. Ki·ªÉm tra c√≥ th·∫•y 2 test tasks kh√¥ng');
    
    console.log('\nüß™ TEST STEPS:');
    console.log('1. ƒêƒÉng nh·∫≠p Nguy·ªÖn M·∫°nh Linh ‚Üí Ph·∫£i th·∫•y 2 tasks');
    console.log('2. ƒêƒÉng nh·∫≠p user kh√°c ‚Üí Ph·∫£i th·∫•y tasks c·ªßa h·ªç');
    console.log('3. Ki·ªÉm tra console kh√¥ng c√≥ l·ªói');

    console.log('\n‚ö†Ô∏è  L∆ØU √ù:');
    console.log('- Policy "temp_test_policy" t·∫°m th·ªùi cho ph√©p xem nhi·ªÅu tasks h∆°n');
    console.log('- Sau khi test OK, ch√∫ng ta s·∫Ω t·∫°o policy ch√≠nh x√°c h∆°n');
    console.log('- M·ª•c ti√™u hi·ªán t·∫°i: ƒê·∫£m b·∫£o user context ho·∫°t ƒë·ªông');

  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', error);
  }
}

// Ch·∫°y script
if (require.main === module) {
  fixContextFunction();
}

module.exports = { fixContextFunction };
