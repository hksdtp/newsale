#!/usr/bin/env node

/**
 * üîç DEBUG DELETE ISSUE
 * Ki·ªÉm tra t·∫°i sao danh s√°ch tasks bi·∫øn m·∫•t sau khi x√≥a
 */

const { createClient } = require('@supabase/supabase-js');

// Supabase configuration
const SUPABASE_URL = 'https://fnakxavwxubnbucfoujd.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZuYWt4YXZ3eHVibmJ1Y2ZvdWpkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA1ODY2NjEsImV4cCI6MjA2NjE2MjY2MX0.Gj4RYtx-fnTHHoLe71mGvhVze5NgWy25PME4OVle22M';

async function debugDeleteIssue() {
  console.log('üîç Debug: T·∫°i sao danh s√°ch tasks bi·∫øn m·∫•t sau khi x√≥a...\n');

  try {
    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    // 1. Ki·ªÉm tra tasks hi·ªán t·∫°i
    console.log('1Ô∏è‚É£ Ki·ªÉm tra tasks hi·ªán t·∫°i...');
    const { data: currentTasks, error: tasksError } = await supabase
      .from('tasks')
      .select('id, name, created_by_id, assigned_to_id')
      .order('created_at', { ascending: false });

    if (tasksError) {
      console.error('‚ùå L·ªói khi l·∫•y tasks:', tasksError);
    } else {
      console.log(`üìä C√≥ ${currentTasks?.length || 0} tasks trong database:`);
      if (currentTasks && currentTasks.length > 0) {
        currentTasks.forEach((task, index) => {
          console.log(`   ${index + 1}. ${task.name} (ID: ${task.id.substring(0, 8)}...)`);
        });
      } else {
        console.log('‚ùå Kh√¥ng c√≥ tasks n√†o trong database!');
      }
    }

    // 2. Test user context v·ªõi Nguy·ªÖn M·∫°nh Linh
    console.log('\n2Ô∏è‚É£ Test user context v·ªõi Nguy·ªÖn M·∫°nh Linh...');
    const nguyenManhLinhId = '3e1aa0d1-d98a-4eb5-b8ff-5e8956757535';
    
    // Set context
    const { error: setError } = await supabase.rpc('set_user_context', {
      user_uuid: nguyenManhLinhId
    });
    
    if (setError) {
      console.error('‚ùå L·ªói set context:', setError);
    } else {
      console.log('‚úÖ Set context th√†nh c√¥ng');
      
      // Test get context
      const { data: contextResult, error: getError } = await supabase.rpc('get_current_user_id_from_context');
      
      if (getError) {
        console.error('‚ùå L·ªói get context:', getError);
      } else {
        console.log(`üìã Context result: ${contextResult}`);
        console.log(`üîç Match: ${contextResult === nguyenManhLinhId ? 'YES' : 'NO'}`);
      }
    }

    // 3. Test query tasks v·ªõi user context
    console.log('\n3Ô∏è‚É£ Test query tasks v·ªõi user context...');
    const { data: userTasks, error: userTasksError } = await supabase
      .from('tasks')
      .select('id, name, created_by_id, assigned_to_id')
      .order('created_at', { ascending: false });

    if (userTasksError) {
      console.error('‚ùå L·ªói khi query tasks v·ªõi user context:', userTasksError);
    } else {
      console.log(`üìä User th·∫•y ${userTasks?.length || 0} tasks:`);
      if (userTasks && userTasks.length > 0) {
        userTasks.forEach((task, index) => {
          const isOwner = task.created_by_id === nguyenManhLinhId;
          const isAssigned = task.assigned_to_id === nguyenManhLinhId;
          console.log(`   ${index + 1}. ${task.name} ${isOwner ? '(Owner)' : ''} ${isAssigned ? '(Assigned)' : ''}`);
        });
      } else {
        console.log('‚ùå User kh√¥ng th·∫•y tasks n√†o!');
      }
    }

    // 4. Ki·ªÉm tra RLS policies
    console.log('\n4Ô∏è‚É£ Ki·ªÉm tra RLS policies...');
    const { data: policies, error: policiesError } = await supabase
      .from('pg_policies')
      .select('policyname, cmd, qual')
      .eq('tablename', 'tasks')
      .order('policyname');

    if (policiesError) {
      console.error('‚ùå L·ªói khi l·∫•y policies:', policiesError);
    } else {
      console.log(`üìã C√≥ ${policies?.length || 0} policies cho b·∫£ng tasks:`);
      if (policies && policies.length > 0) {
        policies.forEach((policy, index) => {
          console.log(`   ${index + 1}. ${policy.policyname} (${policy.cmd})`);
        });
      }
    }

    // 5. ƒê·ªÅ xu·∫•t gi·∫£i ph√°p
    console.log('\n5Ô∏è‚É£ Ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t gi·∫£i ph√°p:');
    
    if (!currentTasks || currentTasks.length === 0) {
      console.log('üîß V·∫§N ƒê·ªÄ: Kh√¥ng c√≥ tasks n√†o trong database');
      console.log('   GI·∫¢I PH√ÅP: T·∫°o l·∫°i test tasks');
      console.log('   SQL ƒë·ªÉ t·∫°o l·∫°i:');
      console.log(`
INSERT INTO tasks (
  name, description, created_by_id, assigned_to_id, 
  status, priority, work_type, department
) VALUES 
(
  'Task Test 1 - Nguy·ªÖn M·∫°nh Linh (Restored)', 
  'Task test ƒë∆∞·ª£c t·∫°o l·∫°i sau khi debug', 
  '${nguyenManhLinhId}', 
  '${nguyenManhLinhId}', 
  'pending', 'medium', 'other', 'HN'
),
(
  'Task Test 2 - Nguy·ªÖn M·∫°nh Linh (Restored)', 
  'Task test th·ª© 2 ƒë∆∞·ª£c t·∫°o l·∫°i', 
  '${nguyenManhLinhId}', 
  '${nguyenManhLinhId}', 
  'in_progress', 'high', 'meeting', 'HN'
);`);
    } else if (userTasks && userTasks.length === 0) {
      console.log('üîß V·∫§N ƒê·ªÄ: RLS policies qu√° strict ho·∫∑c user context kh√¥ng ho·∫°t ƒë·ªông');
      console.log('   GI·∫¢I PH√ÅP: Ki·ªÉm tra v√† fix policies');
    } else {
      console.log('üîß V·∫§N ƒê·ªÄ: C√≥ th·ªÉ l√† frontend issue');
      console.log('   GI·∫¢I PH√ÅP: Ki·ªÉm tra frontend state management');
    }

    console.log('\n6Ô∏è‚É£ H∆∞·ªõng d·∫´n debug frontend:');
    console.log('1. M·ªü Developer Tools (F12)');
    console.log('2. V√†o tab Console');
    console.log('3. X√≥a m·ªôt task v√† xem logs');
    console.log('4. Ki·ªÉm tra c√≥ l·ªói g√¨ trong console kh√¥ng');
    console.log('5. Ki·ªÉm tra Network tab xem API calls');

    console.log('\n7Ô∏è‚É£ Temporary workaround:');
    console.log('- Refresh trang (F5) sau khi x√≥a task');
    console.log('- Ho·∫∑c chuy·ªÉn tab r·ªìi quay l·∫°i');
    console.log('- T√¥i s·∫Ω fix frontend issue sau khi x√°c ƒë·ªãnh nguy√™n nh√¢n');

  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', error);
  }
}

// Ch·∫°y script
if (require.main === module) {
  debugDeleteIssue();
}

module.exports = { debugDeleteIssue };
