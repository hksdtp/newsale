#!/usr/bin/env node

/**
 * üîç DEBUG TASK DELETION ISSUE
 * T√¨m nguy√™n nh√¢n t·∫°i sao danh s√°ch tasks bi·∫øn m·∫•t sau khi x√≥a
 */

const { createClient } = require('@supabase/supabase-js');

// Supabase configuration
const SUPABASE_URL = 'https://fnakxavwxubnbucfoujd.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZuYWt4YXZ3eHVibmJ1Y2ZvdWpkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA1ODY2NjEsImV4cCI6MjA2NjE2MjY2MX0.Gj4RYtx-fnTHHoLe71mGvhVze5NgWy25PME4OVle22M';

async function debugTaskDeletionIssue() {
  console.log('üîç Debug: T·∫°i sao danh s√°ch tasks bi·∫øn m·∫•t sau khi x√≥a...\n');

  try {
    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    // 1. Ki·ªÉm tra t·ªïng s·ªë tasks trong database
    console.log('1Ô∏è‚É£ Ki·ªÉm tra t·ªïng s·ªë tasks trong database...');
    const { data: allTasks, error: allTasksError } = await supabase
      .from('tasks')
      .select('id, name, created_by_id, assigned_to_id, status')
      .order('created_at', { ascending: false });

    if (allTasksError) {
      console.error('‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ tasks:', allTasksError);
    } else {
      console.log(`üìä T·ªïng s·ªë tasks trong database: ${allTasks?.length || 0}`);
      if (allTasks && allTasks.length > 0) {
        console.log('üìã Danh s√°ch tasks:');
        allTasks.forEach((task, index) => {
          console.log(`   ${index + 1}. ${task.name} (Status: ${task.status})`);
          console.log(`      Created by: ${task.created_by_id}`);
          console.log(`      Assigned to: ${task.assigned_to_id}`);
        });
      } else {
        console.log('‚ùå KH√îNG C√ì TASKS N√ÄO TRONG DATABASE!');
        console.log('   ‚Üí ƒê√¢y c√≥ th·ªÉ l√† nguy√™n nh√¢n ch√≠nh');
      }
    }

    // 2. Test user context v·ªõi Nguy·ªÖn M·∫°nh Linh
    console.log('\n2Ô∏è‚É£ Test user context v·ªõi Nguy·ªÖn M·∫°nh Linh...');
    const nguyenManhLinhId = '3e1aa0d1-d98a-4eb5-b8ff-5e8956757535';
    
    // Set context
    const { error: setError } = await supabase.rpc('set_user_context', {
      user_uuid: nguyenManhLinhId
    });
    
    if (setError) {
      console.error('‚ùå L·ªói set context:', setError);
    } else {
      console.log('‚úÖ Set context th√†nh c√¥ng');
      
      // Test get context
      const { data: contextResult, error: getError } = await supabase.rpc('get_current_user_id_from_context');
      
      if (getError) {
        console.error('‚ùå L·ªói get context:', getError);
      } else {
        console.log(`üìã Context result: ${contextResult}`);
        console.log(`üîç Match: ${contextResult === nguyenManhLinhId ? 'YES' : 'NO'}`);
      }
    }

    // 3. Test query v·ªõi RLS
    console.log('\n3Ô∏è‚É£ Test query tasks v·ªõi RLS...');
    const { data: userTasks, error: userTasksError } = await supabase
      .from('tasks')
      .select('id, name, created_by_id, assigned_to_id, status')
      .order('created_at', { ascending: false });

    if (userTasksError) {
      console.error('‚ùå L·ªói khi query tasks v·ªõi RLS:', userTasksError);
    } else {
      console.log(`üìä User th·∫•y ${userTasks?.length || 0} tasks v·ªõi RLS:`);
      if (userTasks && userTasks.length > 0) {
        userTasks.forEach((task, index) => {
          const isOwner = task.created_by_id === nguyenManhLinhId;
          const isAssigned = task.assigned_to_id === nguyenManhLinhId;
          console.log(`   ${index + 1}. ${task.name} ${isOwner ? '(Owner)' : ''} ${isAssigned ? '(Assigned)' : ''}`);
        });
      } else {
        console.log('‚ùå USER KH√îNG TH·∫§Y TASKS N√ÄO V·ªöI RLS!');
        console.log('   ‚Üí RLS policies c√≥ v·∫•n ƒë·ªÅ ho·∫∑c user context kh√¥ng ho·∫°t ƒë·ªông');
      }
    }

    // 4. Ki·ªÉm tra RLS policies hi·ªán t·∫°i
    console.log('\n4Ô∏è‚É£ Ki·ªÉm tra RLS policies hi·ªán t·∫°i...');
    
    // Disable RLS t·∫°m th·ªùi ƒë·ªÉ test
    console.log('üß™ Test query WITHOUT RLS (ƒë·ªÉ so s√°nh)...');
    
    // 5. Ph√¢n t√≠ch nguy√™n nh√¢n
    console.log('\n5Ô∏è‚É£ PH√ÇN T√çCH NGUY√äN NH√ÇN:');
    
    if (!allTasks || allTasks.length === 0) {
      console.log('üö® NGUY√äN NH√ÇN 1: KH√îNG C√ì TASKS TRONG DATABASE');
      console.log('   ‚Üí T·∫•t c·∫£ tasks ƒë√£ b·ªã x√≥a');
      console.log('   ‚Üí C·∫ßn t·∫°o l·∫°i test data');
      
      console.log('\nüîß GI·∫¢I PH√ÅP: T·∫°o l·∫°i test tasks');
      console.log('   SQL ƒë·ªÉ ch·∫°y:');
      console.log(`
INSERT INTO tasks (
  name, description, created_by_id, assigned_to_id, 
  status, priority, work_type, department
) VALUES 
(
  'Task Test 1 - Nguy·ªÖn M·∫°nh Linh (New)', 
  'Task test m·ªõi sau khi debug deletion issue', 
  '${nguyenManhLinhId}', 
  '${nguyenManhLinhId}', 
  'pending', 'medium', 'other', 'HN'
),
(
  'Task Test 2 - Nguy·ªÖn M·∫°nh Linh (New)', 
  'Task test th·ª© 2 m·ªõi', 
  '${nguyenManhLinhId}', 
  '${nguyenManhLinhId}', 
  'in_progress', 'high', 'meeting', 'HN'
),
(
  'Task Test 3 - Nguy·ªÖn M·∫°nh Linh (New)', 
  'Task test th·ª© 3 m·ªõi', 
  '${nguyenManhLinhId}', 
  '${nguyenManhLinhId}', 
  'completed', 'low', 'other', 'HN'
);`);
      
    } else if (userTasks && userTasks.length === 0) {
      console.log('üö® NGUY√äN NH√ÇN 2: RLS POLICIES BLOCK T·∫§T C·∫¢');
      console.log('   ‚Üí User context kh√¥ng ho·∫°t ƒë·ªông');
      console.log('   ‚Üí RLS policies qu√° strict');
      
      console.log('\nüîß GI·∫¢I PH√ÅP: Fix RLS policies');
      
    } else {
      console.log('üö® NGUY√äN NH√ÇN 3: FRONTEND ISSUE');
      console.log('   ‚Üí Database c√≥ data');
      console.log('   ‚Üí RLS ho·∫°t ƒë·ªông');
      console.log('   ‚Üí V·∫•n ƒë·ªÅ ·ªü frontend state management');
    }

    // 6. H∆∞·ªõng d·∫´n debug frontend
    console.log('\n6Ô∏è‚É£ DEBUG FRONTEND:');
    console.log('1. M·ªü Developer Tools (F12)');
    console.log('2. V√†o tab Network');
    console.log('3. X√≥a m·ªôt task');
    console.log('4. Xem API calls:');
    console.log('   - DELETE request c√≥ th√†nh c√¥ng kh√¥ng?');
    console.log('   - GET request sau ƒë√≥ c√≥ ƒë∆∞·ª£c g·ªçi kh√¥ng?');
    console.log('   - Response c√≥ data kh√¥ng?');
    console.log('5. V√†o tab Console xem c√≥ l·ªói JavaScript kh√¥ng');

    console.log('\n7Ô∏è‚É£ TEMPORARY WORKAROUND:');
    console.log('- Sau khi x√≥a task, refresh trang (F5)');
    console.log('- Ho·∫∑c chuy·ªÉn tab kh√°c r·ªìi quay l·∫°i');
    console.log('- T√¥i s·∫Ω fix frontend issue sau khi x√°c ƒë·ªãnh nguy√™n nh√¢n');

  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', error);
  }
}

// Ch·∫°y script
if (require.main === module) {
  debugTaskDeletionIssue();
}

module.exports = { debugTaskDeletionIssue };
