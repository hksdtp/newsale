#!/usr/bin/env node

/**
 * üîí FIX RLS SECURITY - FINAL SOLUTION
 * Kh·∫Øc ph·ª•c ho√†n to√†n v·∫•n ƒë·ªÅ b·∫£o m·∫≠t RLS cho b·∫£ng tasks
 */

const { createClient } = require('@supabase/supabase-js');

// Supabase configuration
const SUPABASE_URL = 'https://fnakxavwxubnbucfoujd.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZuYWt4YXZ3eHVibmJ1Y2ZvdWpkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA1ODY2NjEsImV4cCI6MjA2NjE2MjY2MX0.Gj4RYtx-fnTHHoLe71mGvhVze5NgWy25PME4OVle22M';

async function fixRLSSecurity() {
  console.log('üîí B·∫Øt ƒë·∫ßu kh·∫Øc ph·ª•c b·∫£o m·∫≠t RLS cho b·∫£ng tasks...\n');

  try {
    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    // Step 1: X√≥a t·∫•t c·∫£ policies kh√¥ng an to√†n
    console.log('1Ô∏è‚É£ X√≥a c√°c policies kh√¥ng an to√†n...');
    
    const dropPoliciesSQL = `
-- X√≥a t·∫•t c·∫£ policies hi·ªán t·∫°i cho b·∫£ng tasks
DROP POLICY IF EXISTS "Allow all operations on tasks" ON tasks;
DROP POLICY IF EXISTS "Enable all operations on tasks" ON tasks;
DROP POLICY IF EXISTS "Allow read with app filtering" ON tasks;
DROP POLICY IF EXISTS "Allow read for app functionality" ON tasks;
DROP POLICY IF EXISTS "Allow task creation" ON tasks;
DROP POLICY IF EXISTS "Allow task updates" ON tasks;
DROP POLICY IF EXISTS "Allow task deletion" ON tasks;
DROP POLICY IF EXISTS "Restrict task creation" ON tasks;
DROP POLICY IF EXISTS "Restrict task updates" ON tasks;
DROP POLICY IF EXISTS "Temporary lockdown" ON tasks;

-- X√≥a c√°c policies c≈© kh√°c
DROP POLICY IF EXISTS "Users can view their own created tasks" ON tasks;
DROP POLICY IF EXISTS "Users can view assigned tasks" ON tasks;
DROP POLICY IF EXISTS "Users can view public tasks in same department" ON tasks;
DROP POLICY IF EXISTS "Users can view team tasks in same team" ON tasks;
DROP POLICY IF EXISTS "Directors can view all tasks" ON tasks;
DROP POLICY IF EXISTS "Users can create tasks" ON tasks;
DROP POLICY IF EXISTS "Users can update their own tasks" ON tasks;
DROP POLICY IF EXISTS "Assigned users can update task status" ON tasks;
DROP POLICY IF EXISTS "Users can delete their own tasks" ON tasks;
DROP POLICY IF EXISTS "Directors can delete any task" ON tasks;
DROP POLICY IF EXISTS "Custom auth: Users can view their own created tasks" ON tasks;
DROP POLICY IF EXISTS "Custom auth: Users can view assigned tasks" ON tasks;
`;

    console.log('üìù ƒêang x√≥a policies c≈©...');
    
    // Step 2: T·∫°o function helper ƒë·ªÉ l·∫•y user ID t·ª´ custom context
    console.log('\n2Ô∏è‚É£ T·∫°o helper functions...');
    
    const helperFunctionsSQL = `
-- Function ƒë·ªÉ l·∫•y current user ID t·ª´ custom context
CREATE OR REPLACE FUNCTION get_current_user_id_from_context()
RETURNS UUID AS $$
DECLARE
  user_id_text TEXT;
  user_id UUID;
BEGIN
  -- L·∫•y user ID t·ª´ custom setting
  user_id_text := current_setting('app.current_user_id', true);
  
  -- N·∫øu kh√¥ng c√≥ ho·∫∑c r·ªóng, tr·∫£ v·ªÅ NULL
  IF user_id_text IS NULL OR user_id_text = '' THEN
    RETURN NULL;
  END IF;
  
  -- Convert text to UUID
  BEGIN
    user_id := user_id_text::UUID;
    RETURN user_id;
  EXCEPTION WHEN OTHERS THEN
    RETURN NULL;
  END;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant permissions
GRANT EXECUTE ON FUNCTION get_current_user_id_from_context() TO authenticated, anon;
`;

    console.log('üìù ƒêang t·∫°o helper functions...');

    // Step 3: T·∫°o secure RLS policies
    console.log('\n3Ô∏è‚É£ T·∫°o secure RLS policies...');
    
    const securePoliciesSQL = `
-- üîí SECURE RLS POLICIES FOR TASKS TABLE

-- Policy 1: Users can view tasks they created
CREATE POLICY "secure_view_own_created_tasks" ON tasks
  FOR SELECT USING (
    created_by_id = get_current_user_id_from_context()
  );

-- Policy 2: Users can view tasks assigned to them
CREATE POLICY "secure_view_assigned_tasks" ON tasks
  FOR SELECT USING (
    assigned_to_id = get_current_user_id_from_context()
  );

-- Policy 3: Directors can view all tasks (retail_director role)
CREATE POLICY "secure_directors_view_all" ON tasks
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM users 
      WHERE id = get_current_user_id_from_context()
      AND role = 'retail_director'
    )
  );

-- Policy 4: Team leaders can view team tasks
CREATE POLICY "secure_team_leaders_view_team_tasks" ON tasks
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM users 
      WHERE id = get_current_user_id_from_context()
      AND role = 'team_leader'
      AND team_id = tasks.team_id
    )
  );

-- INSERT policies
CREATE POLICY "secure_create_own_tasks" ON tasks
  FOR INSERT WITH CHECK (
    created_by_id = get_current_user_id_from_context()
  );

-- UPDATE policies
CREATE POLICY "secure_update_own_tasks" ON tasks
  FOR UPDATE USING (
    created_by_id = get_current_user_id_from_context()
    OR assigned_to_id = get_current_user_id_from_context()
  );

-- DELETE policies
CREATE POLICY "secure_delete_own_tasks" ON tasks
  FOR DELETE USING (
    created_by_id = get_current_user_id_from_context()
    OR EXISTS (
      SELECT 1 FROM users 
      WHERE id = get_current_user_id_from_context()
      AND role IN ('retail_director', 'team_leader')
    )
  );
`;

    console.log('üìù ƒêang t·∫°o secure policies...');

    // Ch·∫°y t·∫•t c·∫£ SQL statements
    const allSQL = dropPoliciesSQL + helperFunctionsSQL + securePoliciesSQL;
    
    // Th·ª≠ ch·∫°y t·ª´ng ph·∫ßn
    const sqlParts = [
      { name: 'Drop Policies', sql: dropPoliciesSQL },
      { name: 'Helper Functions', sql: helperFunctionsSQL },
      { name: 'Secure Policies', sql: securePoliciesSQL }
    ];

    for (const part of sqlParts) {
      console.log(`\nüìù ƒêang ch·∫°y: ${part.name}...`);
      console.log('='.repeat(60));
      console.log('Vui l√≤ng copy ƒëo·∫°n SQL sau v√†o Supabase SQL Editor:');
      console.log(part.sql);
      console.log('='.repeat(60));
    }

    // Step 4: ƒê·∫£m b·∫£o RLS ƒë∆∞·ª£c b·∫≠t
    console.log('\n4Ô∏è‚É£ ƒê·∫£m b·∫£o RLS ƒë∆∞·ª£c b·∫≠t...');
    const enableRLSSQL = `
-- ƒê·∫£m b·∫£o RLS ƒë∆∞·ª£c b·∫≠t cho b·∫£ng tasks
ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;
`;
    
    console.log('üìù SQL ƒë·ªÉ b·∫≠t RLS:');
    console.log('='.repeat(60));
    console.log(enableRLSSQL);
    console.log('='.repeat(60));

    // Step 5: H∆∞·ªõng d·∫´n test
    console.log('\n5Ô∏è‚É£ H∆∞·ªõng d·∫´n test b·∫£o m·∫≠t:');
    console.log('1. M·ªü Supabase SQL Editor: https://supabase.com/dashboard/project/fnakxavwxubnbucfoujd/sql');
    console.log('2. Copy v√† ch·∫°y t·ª´ng ƒëo·∫°n SQL ·ªü tr√™n theo th·ª© t·ª±');
    console.log('3. Refresh trang web app');
    console.log('4. ƒêƒÉng nh·∫≠p v·ªõi c√°c t√†i kho·∫£n kh√°c nhau ƒë·ªÉ test');
    console.log('5. Ki·ªÉm tra m·ªói user ch·ªâ th·∫•y tasks c·ªßa m√¨nh');

    console.log('\n‚úÖ Script ho√†n th√†nh! Vui l√≤ng th·ª±c hi·ªán c√°c b∆∞·ªõc tr√™n ƒë·ªÉ kh·∫Øc ph·ª•c b·∫£o m·∫≠t.');

  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', error);
  }
}

// Ch·∫°y script
if (require.main === module) {
  fixRLSSecurity();
}

module.exports = { fixRLSSecurity };
