#!/usr/bin/env node

const SUPABASE_URL = 'https://fnakxavwxubnbucfoujd.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZuYWt4YXZ3eHVibmJ1Y2ZvdWpkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA1ODY2NjEsImV4cCI6MjA2NjE2MjY2MX0.Gj4RYtx-fnTHHoLe71mGvhVze5NgWy25PME4OVle22M';

async function analyzeCrossTeamTask() {
  console.log('üîç PH√ÇN T√çCH CROSS-TEAM TASK ASSIGNMENT');
  console.log('=====================================\n');
  
  try {
    // 1. L·∫•y th√¥ng tin Qu·∫£n Thu H√†
    console.log('üë§ TH√îNG TIN QU·∫¢N THU H√Ä:');
    const quanThuHaResponse = await fetch(`${SUPABASE_URL}/rest/v1/users?select=*&name=ilike.*Qu·∫£n Thu H√†*`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });
    
    const quanThuHaData = await quanThuHaResponse.json();
    let quanThuHa = null;
    if (Array.isArray(quanThuHaData) && quanThuHaData.length > 0) {
      quanThuHa = quanThuHaData[0];
      console.log(`‚úÖ T√™n: ${quanThuHa.name}`);
      console.log(`   - ID: ${quanThuHa.id}`);
      console.log(`   - Team ID: ${quanThuHa.team_id}`);
      console.log(`   - Role: ${quanThuHa.role}`);
      console.log(`   - Location: ${quanThuHa.location}`);
      console.log(`   - Department: ${quanThuHa.department_type}`);
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y Qu·∫£n Thu H√†');
      return;
    }

    // 2. L·∫•y th√¥ng tin Ph·∫°m Th·ªã H∆∞∆°ng
    console.log('\nüë§ TH√îNG TIN PH·∫†M TH·ªä H∆Ø∆†NG:');
    const phamThiHuongResponse = await fetch(`${SUPABASE_URL}/rest/v1/users?select=*&name=ilike.*Ph·∫°m Th·ªã H∆∞∆°ng*`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });
    
    const phamThiHuongData = await phamThiHuongResponse.json();
    let phamThiHuong = null;
    if (Array.isArray(phamThiHuongData) && phamThiHuongData.length > 0) {
      phamThiHuong = phamThiHuongData[0];
      console.log(`‚úÖ T√™n: ${phamThiHuong.name}`);
      console.log(`   - ID: ${phamThiHuong.id}`);
      console.log(`   - Team ID: ${phamThiHuong.team_id}`);
      console.log(`   - Role: ${phamThiHuong.role}`);
      console.log(`   - Location: ${phamThiHuong.location}`);
      console.log(`   - Department: ${phamThiHuong.department_type}`);
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y Ph·∫°m Th·ªã H∆∞∆°ng');
      return;
    }

    // 3. L·∫•y th√¥ng tin teams
    console.log('\nüè¢ TH√îNG TIN TEAMS:');
    
    // Team c·ªßa Qu·∫£n Thu H√†
    const quanTeamResponse = await fetch(`${SUPABASE_URL}/rest/v1/teams?select=*&id=eq.${quanThuHa.team_id}`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });
    const quanTeamData = await quanTeamResponse.json();
    
    // Team c·ªßa Ph·∫°m Th·ªã H∆∞∆°ng
    const phamTeamResponse = await fetch(`${SUPABASE_URL}/rest/v1/teams?select=*&id=eq.${phamThiHuong.team_id}`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });
    const phamTeamData = await phamTeamResponse.json();
    
    if (Array.isArray(quanTeamData) && quanTeamData.length > 0) {
      console.log(`üìç Team c·ªßa Qu·∫£n Thu H√†: ${quanTeamData[0].name}`);
      console.log(`   - Team ID: ${quanTeamData[0].id}`);
      console.log(`   - Location: ${quanTeamData[0].location}`);
    }
    
    if (Array.isArray(phamTeamData) && phamTeamData.length > 0) {
      console.log(`üìç Team c·ªßa Ph·∫°m Th·ªã H∆∞∆°ng: ${phamTeamData[0].name}`);
      console.log(`   - Team ID: ${phamTeamData[0].id}`);
      console.log(`   - Location: ${phamTeamData[0].location}`);
    }

    // 4. Ph√¢n t√≠ch cross-team assignment
    console.log('\nüîç PH√ÇN T√çCH CROSS-TEAM ASSIGNMENT:');
    const isSameTeam = quanThuHa.team_id === phamThiHuong.team_id;
    const isSameLocation = quanThuHa.location === phamThiHuong.location;
    
    console.log(`   - C√πng team: ${isSameTeam ? '‚úÖ C√ì' : '‚ùå KH√îNG'}`);
    console.log(`   - C√πng location: ${isSameLocation ? '‚úÖ C√ì' : '‚ùå KH√îNG'}`);
    console.log(`   - Qu·∫£n Thu H√† role: ${quanThuHa.role}`);
    console.log(`   - Ph·∫°m Th·ªã H∆∞∆°ng role: ${phamThiHuong.role}`);

    // 5. T√¨m task c·ª• th·ªÉ
    console.log('\nüìã TH√îNG TIN TASK "KH- Ch·ªã Linh - Qu·∫£ng An":');
    const taskResponse = await fetch(`${SUPABASE_URL}/rest/v1/tasks?select=*&name=ilike.*Qu·∫£ng An*`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });
    
    const taskData = await taskResponse.json();
    if (Array.isArray(taskData) && taskData.length > 0) {
      const task = taskData[0];
      console.log(`‚úÖ Task: ${task.name}`);
      console.log(`   - ID: ${task.id}`);
      console.log(`   - Created by ID: ${task.created_by_id}`);
      console.log(`   - Assigned to ID: ${task.assigned_to_id}`);
      console.log(`   - Share scope: ${task.share_scope}`);
      console.log(`   - Department: ${task.department}`);
      console.log(`   - Status: ${task.status}`);
      console.log(`   - Created at: ${task.created_at}`);
      
      // Verify IDs match
      console.log('\nüîç VERIFICATION:');
      console.log(`   - Creator ID matches Qu·∫£n Thu H√†: ${task.created_by_id === quanThuHa.id ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - Assignee ID matches Ph·∫°m Th·ªã H∆∞∆°ng: ${task.assigned_to_id === phamThiHuong.id ? '‚úÖ' : '‚ùå'}`);
    }

    // 6. Ph√¢n t√≠ch business logic
    console.log('\nüö® PH√ÇN T√çCH BUSINESS LOGIC:');
    
    if (!isSameTeam) {
      console.log('‚ö†Ô∏è  PH√ÅT HI·ªÜN V·∫§N ƒê·ªÄ:');
      console.log('   - ƒê√¢y l√† CROSS-TEAM TASK ASSIGNMENT');
      console.log('   - Qu·∫£n Thu H√† t·∫°o task cho ng∆∞·ªùi ·ªü team kh√°c');
      console.log('   - Vi ph·∫°m nguy√™n t·∫Øc team isolation');
      
      console.log('\nüîí SECURITY IMPLICATIONS:');
      console.log('   - Team members c√≥ th·ªÉ assign tasks cho teams kh√°c');
      console.log('   - C√≥ th·ªÉ bypass team permissions');
      console.log('   - C·∫ßn review task creation permissions');
      
      console.log('\nüí° KHUY·∫æN NGH·ªä:');
      console.log('   1. Ki·ªÉm tra task creation permissions');
      console.log('   2. Implement cross-team assignment rules');
      console.log('   3. Add validation cho assignee selection');
      console.log('   4. Review existing cross-team tasks');
    } else {
      console.log('‚úÖ BUSINESS LOGIC H·ª¢P L·ªÜ:');
      console.log('   - C√πng team, assignment h·ª£p l·ªá');
    }

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

analyzeCrossTeamTask();
