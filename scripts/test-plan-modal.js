#!/usr/bin/env node

/**
 * Script ƒë·ªÉ test ch·ª©c nƒÉng modal chi ti·∫øt k·∫ø ho·∫°ch
 * Ki·ªÉm tra c√°c k·∫ø ho·∫°ch c√≥ s·∫µn trong database
 */

const SUPABASE_URL = 'https://fnakxavwxubnbucfoujd.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZuYWt4YXZ3eHVibmJ1Y2ZvdWpkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA1ODY2NjEsImV4cCI6MjA2NjE2MjY2MX0.Gj4RYtx-fnTHHoLe71mGvhVze5NgWy25PME4OVle22M';

async function testPlanModal() {
  console.log('üß™ Testing Plan Detail Modal functionality...\n');
  
  try {
    // 1. L·∫•y danh s√°ch scheduled tasks
    console.log('üìã Fetching scheduled tasks...');
    const response = await fetch(`${SUPABASE_URL}/rest/v1/scheduled_tasks?select=*&limit=10`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const tasks = await response.json();
    
    if (!Array.isArray(tasks) || tasks.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ scheduled tasks n√†o trong database');
      console.log('üí° H√£y t·∫°o m·ªôt s·ªë k·∫ø ho·∫°ch trong ·ª©ng d·ª•ng ƒë·ªÉ test');
      return;
    }
    
    console.log(`‚úÖ T√¨m th·∫•y ${tasks.length} scheduled tasks:`);
    
    // 2. Hi·ªÉn th·ªã th√¥ng tin c√°c tasks
    tasks.forEach((task, index) => {
      console.log(`\n${index + 1}. ${task.name || 'Unnamed Task'}`);
      console.log(`   - ID: ${task.id}`);
      console.log(`   - Description: ${task.description || 'No description'}`);
      console.log(`   - Scheduled Date: ${task.scheduled_date || 'No date'}`);
      console.log(`   - Scheduled Time: ${task.scheduled_time || 'No time'}`);
      console.log(`   - Priority: ${task.priority || 'normal'}`);
      console.log(`   - Created By: ${task.created_by_name || 'Unknown'}`);
      console.log(`   - Source: ${task.source || 'unknown'}`);
    });
    
    // 3. Test t·∫°o m·ªôt scheduled task m·ªõi ƒë·ªÉ test modal
    console.log('\nüÜï Creating a test scheduled task...');
    
    const testTask = {
      name: 'Test Plan Modal - ' + new Date().toLocaleTimeString(),
      description: 'ƒê√¢y l√† k·∫ø ho·∫°ch test ƒë·ªÉ ki·ªÉm tra modal chi ti·∫øt',
      scheduled_date: new Date().toISOString().split('T')[0], // H√¥m nay
      scheduled_time: '14:30',
      priority: 'high',
      source: 'manual',
      created_by_name: 'Test User'
    };
    
    const createResponse = await fetch(`${SUPABASE_URL}/rest/v1/scheduled_tasks`, {
      method: 'POST',
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      },
      body: JSON.stringify(testTask)
    });
    
    if (createResponse.ok) {
      const newTask = await createResponse.json();
      console.log('‚úÖ Test task created successfully!');
      console.log(`   - ID: ${newTask[0]?.id}`);
      console.log(`   - Name: ${newTask[0]?.name}`);
      
      // 4. Test c·∫≠p nh·∫≠t task
      console.log('\nüîÑ Testing task update...');
      const updateResponse = await fetch(`${SUPABASE_URL}/rest/v1/scheduled_tasks?id=eq.${newTask[0].id}`, {
        method: 'PATCH',
        headers: {
          'apikey': SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          description: 'M√¥ t·∫£ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ modal - ' + new Date().toLocaleTimeString()
        })
      });
      
      if (updateResponse.ok) {
        console.log('‚úÖ Task update successful!');
      } else {
        const updateError = await updateResponse.json();
        console.log('‚ùå Task update failed:', updateError);
      }
      
    } else {
      const createError = await createResponse.json();
      console.log('‚ùå Failed to create test task:', createError);
    }
    
    // 5. H∆∞·ªõng d·∫´n test manual
    console.log('\nüìù MANUAL TESTING CHECKLIST:');
    console.log('1. ‚úÖ M·ªü ·ª©ng d·ª•ng v√† v√†o tab "K·∫ø Ho·∫°ch"');
    console.log('2. ‚úÖ Click v√†o m·ªôt item k·∫ø ho·∫°ch trong danh s√°ch');
    console.log('3. ‚úÖ Ki·ªÉm tra modal PlanDetailModal hi·ªÉn th·ªã');
    console.log('4. ‚úÖ Verify th√¥ng tin hi·ªÉn th·ªã ƒë√∫ng (t√™n, m√¥ t·∫£, th·ªùi gian, ∆∞u ti√™n)');
    console.log('5. ‚úÖ Click n√∫t "Ch·ªânh s·ª≠a" v√† test edit mode');
    console.log('6. ‚úÖ Thay ƒë·ªïi th√¥ng tin v√† click "L∆∞u thay ƒë·ªïi"');
    console.log('7. ‚úÖ Ki·ªÉm tra loading state khi l∆∞u');
    console.log('8. ‚úÖ Test responsive tr√™n mobile (resize browser)');
    console.log('9. ‚úÖ Test n√∫t "X√≥a" v·ªõi confirmation');
    console.log('10. ‚úÖ Ki·ªÉm tra console kh√¥ng c√≥ l·ªói JavaScript');
    
    console.log('\nüéØ EXPECTED BEHAVIOR:');
    console.log('- Modal m·ªü khi click v√†o plan item');
    console.log('- Dropdown "Xem chi ti·∫øt" c≈©ng m·ªü modal');
    console.log('- Edit mode ho·∫°t ƒë·ªông v·ªõi validation');
    console.log('- Loading states hi·ªÉn th·ªã khi save/delete');
    console.log('- Responsive design tr√™n mobile');
    console.log('- Kh√¥ng c√≥ l·ªói console');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

testPlanModal();
