import { getCurrentUser } from '../data/usersMockData';
import { TaskWithUsers } from '../services/taskService';

/**
 * Utility functions for task permissions
 * Ch·ªâ ng∆∞·ªùi t·∫°o c√¥ng vi·ªác m·ªõi c√≥ quy·ªÅn ch·ªânh s·ª≠a, x√≥a
 */

// Cache ƒë·ªÉ l∆∞u k·∫øt qu·∫£ ki·ªÉm tra quy·ªÅn (t·ªëi ∆∞u hi·ªáu su·∫•t)
const permissionCache = new Map<string, { permissions: any; timestamp: number }>();
const CACHE_DURATION = 5 * 60 * 1000; // 5 ph√∫t

// Ghi log khi c√≥ ng∆∞·ªùi c·ªë g·∫Øng truy c·∫≠p tr√°i ph√©p
function logUnauthorizedAccess(action: string, taskId: string, userId: string, taskName: string) {
  const logEntry = {
    timestamp: new Date().toISOString(),
    action: action, // h√†nh ƒë·ªông: "ch·ªânh s·ª≠a", "x√≥a", v.v.
    taskId: taskId,
    taskName: taskName,
    userId: userId,
    type: 'UNAUTHORIZED_ACCESS', // lo·∫°i log
  };

  console.warn('üö® Truy c·∫≠p tr√°i ph√©p:', logEntry);

  // C√≥ th·ªÉ g·ª≠i l√™n server ƒë·ªÉ l∆∞u v√†o database
  // await sendAuditLog(logEntry);
}

/**
 * Ki·ªÉm tra xem user c√≥ quy·ªÅn d·ª±a tr√™n vai tr√≤ (role-based)
 * @param userRole - Vai tr√≤ c·ªßa user: 'admin', 'manager', 'employee'
 * @returns true n·∫øu user c√≥ quy·ªÅn qu·∫£n l√Ω t·∫•t c·∫£ tasks
 */
function hasAdminPermissions(userRole?: string): boolean {
  // Admin v√† Manager c√≥ th·ªÉ ch·ªânh s·ª≠a t·∫•t c·∫£ c√¥ng vi·ªác
  return userRole === 'admin' || userRole === 'manager' || userRole === 'retail_director';
}

/**
 * Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ ph·∫£i l√† ch·ªß s·ªü h·ªØu c·ªßa task kh√¥ng
 * @param task - Task c·∫ßn ki·ªÉm tra
 * @param currentUserId - ID c·ªßa user hi·ªán t·∫°i (optional, s·∫Ω l·∫•y t·ª´ getCurrentUser n·∫øu kh√¥ng c√≥)
 * @returns true n·∫øu user hi·ªán t·∫°i l√† ch·ªß s·ªü h·ªØu task
 */
export function isTaskOwner(task: TaskWithUsers, currentUserId?: string): boolean {
  try {
    // L·∫•y current user n·∫øu kh√¥ng ƒë∆∞·ª£c truy·ªÅn v√†o
    const currentUser = getCurrentUser();
    const userId = currentUserId || currentUser?.id;

    if (!userId || !task) {
      console.warn('‚ö†Ô∏è isTaskOwner: Missing userId or task');
      return false;
    }

    // Ki·ªÉm tra quy·ªÅn admin/manager tr∆∞·ªõc (h·ªç c√≥ th·ªÉ ch·ªânh s·ª≠a t·∫•t c·∫£)
    if (hasAdminPermissions(currentUser?.role)) {
      console.log('üëë Admin/Manager c√≥ quy·ªÅn ch·ªânh s·ª≠a t·∫•t c·∫£ tasks');
      return true;
    }

    // Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ ph·∫£i l√† ng∆∞·ªùi t·∫°o task kh√¥ng
    const isOwner = task.created_by_id === userId;

    console.log('üîê Task permission check:', {
      taskId: task.id,
      taskName: task.name,
      createdBy: task.created_by_id,
      currentUser: userId,
      userRole: currentUser?.role,
      isOwner: isOwner,
    });

    return isOwner;
  } catch (error) {
    console.error('‚ùå Error checking task ownership:', error);
    return false;
  }
}

/**
 * Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ quy·ªÅn ch·ªânh s·ª≠a task kh√¥ng
 * @param task - Task c·∫ßn ki·ªÉm tra
 * @param currentUserId - ID c·ªßa user hi·ªán t·∫°i (optional)
 * @returns true n·∫øu user c√≥ quy·ªÅn ch·ªânh s·ª≠a
 */
export function canEditTask(task: TaskWithUsers, currentUserId?: string): boolean {
  // Hi·ªán t·∫°i ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ quy·ªÅn ch·ªânh s·ª≠a
  return isTaskOwner(task, currentUserId);
}

/**
 * Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ quy·ªÅn x√≥a task kh√¥ng
 * @param task - Task c·∫ßn ki·ªÉm tra
 * @param currentUserId - ID c·ªßa user hi·ªán t·∫°i (optional)
 * @returns true n·∫øu user c√≥ quy·ªÅn x√≥a
 */
export function canDeleteTask(task: TaskWithUsers, currentUserId?: string): boolean {
  // Hi·ªán t·∫°i ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ quy·ªÅn x√≥a
  return isTaskOwner(task, currentUserId);
}

/**
 * Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ quy·ªÅn thay ƒë·ªïi tr·∫°ng th√°i task kh√¥ng
 * @param task - Task c·∫ßn ki·ªÉm tra
 * @param currentUserId - ID c·ªßa user hi·ªán t·∫°i (optional)
 * @returns true n·∫øu user c√≥ quy·ªÅn thay ƒë·ªïi tr·∫°ng th√°i
 */
export function canChangeTaskStatus(task: TaskWithUsers, currentUserId?: string): boolean {
  // Hi·ªán t·∫°i ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ quy·ªÅn thay ƒë·ªïi tr·∫°ng th√°i
  return isTaskOwner(task, currentUserId);
}

/**
 * Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ quy·ªÅn thay ƒë·ªïi ∆∞u ti√™n task kh√¥ng
 * @param task - Task c·∫ßn ki·ªÉm tra
 * @param currentUserId - ID c·ªßa user hi·ªán t·∫°i (optional)
 * @returns true n·∫øu user c√≥ quy·ªÅn thay ƒë·ªïi ∆∞u ti√™n
 */
export function canChangePriority(task: TaskWithUsers, currentUserId?: string): boolean {
  // Hi·ªán t·∫°i ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ quy·ªÅn thay ƒë·ªïi ∆∞u ti√™n
  return isTaskOwner(task, currentUserId);
}

/**
 * Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ quy·ªÅn thay ƒë·ªïi danh m·ª•c c√¥ng vi·ªác kh√¥ng
 * @param task - Task c·∫ßn ki·ªÉm tra
 * @param currentUserId - ID c·ªßa user hi·ªán t·∫°i (optional)
 * @returns true n·∫øu user c√≥ quy·ªÅn thay ƒë·ªïi danh m·ª•c
 */
export function canChangeWorkType(task: TaskWithUsers, currentUserId?: string): boolean {
  // Hi·ªán t·∫°i ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ quy·ªÅn thay ƒë·ªïi danh m·ª•c
  return isTaskOwner(task, currentUserId);
}

/**
 * Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ quy·ªÅn assign task cho ng∆∞·ªùi kh√°c kh√¥ng
 * @param task - Task c·∫ßn ki·ªÉm tra
 * @param currentUserId - ID c·ªßa user hi·ªán t·∫°i (optional)
 * @returns true n·∫øu user c√≥ quy·ªÅn assign
 */
export function canAssignTask(task: TaskWithUsers, currentUserId?: string): boolean {
  // Hi·ªán t·∫°i ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ quy·ªÅn assign
  return isTaskOwner(task, currentUserId);
}

/**
 * L·∫•y th√¥ng tin quy·ªÅn h·∫°n c·ªßa user ƒë·ªëi v·ªõi m·ªôt task (c√≥ cache ƒë·ªÉ t·ªëi ∆∞u)
 * @param task - Task c·∫ßn ki·ªÉm tra
 * @param currentUserId - ID c·ªßa user hi·ªán t·∫°i (optional)
 * @returns Object ch·ª©a t·∫•t c·∫£ quy·ªÅn h·∫°n
 */
export function getTaskPermissions(task: TaskWithUsers, currentUserId?: string) {
  const userId = currentUserId || getCurrentUser()?.id;
  const cacheKey = `${task.id}-${userId}`;

  // Ki·ªÉm tra cache tr∆∞·ªõc (ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô)
  const cached = permissionCache.get(cacheKey);
  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
    console.log('üì¶ S·ª≠ d·ª•ng cache cho permissions c·ªßa task:', task.name);
    return cached.permissions;
  }

  const isOwner = isTaskOwner(task, currentUserId);

  const permissions = {
    isOwner,
    canEdit: canEditTask(task, currentUserId),
    canDelete: canDeleteTask(task, currentUserId),
    canChangeStatus: canChangeTaskStatus(task, currentUserId),
    canChangePriority: canChangePriority(task, currentUserId),
    canChangeWorkType: canChangeWorkType(task, currentUserId),
    canAssign: canAssignTask(task, currentUserId),
    // Quy·ªÅn xem lu√¥n c√≥ (v√¨ ƒë√£ th·∫•y task trong list)
    canView: true,
  };

  // L∆∞u v√†o cache
  permissionCache.set(cacheKey, {
    permissions,
    timestamp: Date.now(),
  });

  return permissions;
}

/**
 * X√≥a cache permissions khi c√≥ thay ƒë·ªïi (real-time updates)
 * @param taskId - ID c·ªßa task b·ªã thay ƒë·ªïi
 */
export function clearPermissionCache(taskId?: string) {
  if (taskId) {
    // X√≥a cache cho task c·ª• th·ªÉ
    for (const key of permissionCache.keys()) {
      if (key.startsWith(taskId)) {
        permissionCache.delete(key);
      }
    }
    console.log('üóëÔ∏è ƒê√£ x√≥a cache permissions cho task:', taskId);
  } else {
    // X√≥a to√†n b·ªô cache
    permissionCache.clear();
    console.log('üóëÔ∏è ƒê√£ x√≥a to√†n b·ªô cache permissions');
  }
}

/**
 * T·∫°o th√¥ng b√°o l·ªói khi user kh√¥ng c√≥ quy·ªÅn (v√† ghi log)
 * @param action - H√†nh ƒë·ªông user ƒëang c·ªë g·∫Øng th·ª±c hi·ªán
 * @param taskName - T√™n c·ªßa task
 * @param taskId - ID c·ªßa task (ƒë·ªÉ ghi log)
 * @returns Th√¥ng b√°o l·ªói
 */
export function getPermissionErrorMessage(
  action: string,
  taskName: string,
  taskId?: string
): string {
  const currentUser = getCurrentUser();

  // Ghi log truy c·∫≠p tr√°i ph√©p
  if (taskId && currentUser?.id) {
    logUnauthorizedAccess(action, taskId, currentUser.id, taskName);
  }

  return `‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn ${action} c√¥ng vi·ªác "${taskName}". Ch·ªâ ng∆∞·ªùi t·∫°o c√¥ng vi·ªác ho·∫∑c Admin/Manager m·ªõi c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.`;
}

/**
 * Ki·ªÉm tra v√† th√¥ng b√°o l·ªói n·∫øu kh√¥ng c√≥ quy·ªÅn
 * @param task - Task c·∫ßn ki·ªÉm tra
 * @param action - H√†nh ƒë·ªông c·∫ßn th·ª±c hi·ªán
 * @param requiredPermission - Quy·ªÅn c·∫ßn thi·∫øt (v√≠ d·ª•: 'canEdit', 'canDelete')
 * @returns true n·∫øu c√≥ quy·ªÅn, false v√† hi·ªán th√¥ng b√°o n·∫øu kh√¥ng c√≥ quy·ªÅn
 */
export function checkPermissionWithAlert(
  task: TaskWithUsers,
  action: string,
  requiredPermission: keyof ReturnType<typeof getTaskPermissions>
): boolean {
  const permissions = getTaskPermissions(task);

  if (!permissions[requiredPermission]) {
    alert(getPermissionErrorMessage(action, task.name, task.id));
    return false;
  }

  return true;
}
